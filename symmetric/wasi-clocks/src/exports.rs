// Generated by `wit-bindgen` 0.44.0. DO NOT EDIT!
// Options used:
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wasi {
        pub mod clocks {
            /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
            /// time.
            ///
            /// It is intended to be portable at least between Unix-family platforms and
            /// Windows.
            ///
            /// A monotonic clock is a clock which has an unspecified initial value, and
            /// successive reads of the clock will produce non-decreasing values.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod monotonic_clock {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// An instant in time, in nanoseconds. An instant is relative to an
                /// unspecified initial value, and can only be compared to instances from
                /// the same monotonic-clock.
                pub type Instant = u64;
                /// A duration of time, in nanoseconds.
                pub type Duration = u64;
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_now_cabi<T: Guest>() -> i64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { T::now() };
                        _rt::as_i64(result0)
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_resolution_cabi<T: Guest>() -> i64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { T::resolution() };
                        _rt::as_i64(result0)
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_async_wait_until_cabi<T: Guest>(
                    arg0: i64,
                ) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        wit_bindgen::rt::async_support::start_task(async move {
                            let _task_cancel = wit_bindgen::rt::async_support::TaskCancelOnDrop::new();
                            { T::wait_until(arg0 as u64).await };
                        })
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_async_wait_for_cabi<T: Guest>(
                    arg0: i64,
                ) -> *mut u8 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        wit_bindgen::rt::async_support::start_task(async move {
                            let _task_cancel = wit_bindgen::rt::async_support::TaskCancelOnDrop::new();
                            { T::wait_for(arg0 as u64).await };
                        })
                    }
                }
                pub trait Guest {
                    /// Read the current value of the clock.
                    ///
                    /// The clock is monotonic, therefore calling this function repeatedly will
                    /// produce a sequence of non-decreasing values.
                    #[allow(async_fn_in_trait)]
                    fn now() -> Instant;
                    /// Query the resolution of the clock. Returns the duration of time
                    /// corresponding to a clock tick.
                    #[allow(async_fn_in_trait)]
                    fn resolution() -> Duration;
                    /// Wait until the specified instant has occurred.
                    #[allow(async_fn_in_trait)]
                    async fn wait_until(when: Instant) -> ();
                    /// Wait for the specified duration has elapsed.
                    #[allow(async_fn_in_trait)]
                    async fn wait_for(how_long: Duration) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_wasi_clocks_monotonic_clock_0_3_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[cfg_attr(target_arch = "wasm32", export_name =
                        "now")] #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        wasiX3AclocksX2Fmonotonic_clockX400X2E3X2E0X00now() -> i64 {
                        unsafe { $($path_to_types)*:: _export_now_cabi::<$ty > () } }
                        #[cfg_attr(target_arch = "wasm32", export_name = "resolution")]
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        wasiX3AclocksX2Fmonotonic_clockX400X2E3X2E0X00resolution() -> i64
                        { unsafe { $($path_to_types)*:: _export_resolution_cabi::<$ty >
                        () } } #[cfg_attr(target_arch = "wasm32", export_name =
                        "[async]wait-until")] #[cfg_attr(not(target_arch = "wasm32"),
                        no_mangle)] #[allow(non_snake_case)] unsafe extern "C" fn
                        wasiX3AclocksX2Fmonotonic_clockX400X2E3X2E0X00X5BasyncX5Dwait_until(arg0
                        : i64,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_async_wait_until_cabi::<$ty > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name =
                        "[async]wait-for")] #[cfg_attr(not(target_arch = "wasm32"),
                        no_mangle)] #[allow(non_snake_case)] unsafe extern "C" fn
                        wasiX3AclocksX2Fmonotonic_clockX400X2E3X2E0X00X5BasyncX5Dwait_for(arg0
                        : i64,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_async_wait_for_cabi::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasi_clocks_monotonic_clock_0_3_0_cabi;
            }
            /// WASI Wall Clock is a clock API intended to let users query the current
            /// time. The name "wall" makes an analogy to a "clock on the wall", which
            /// is not necessarily monotonic as it may be reset.
            ///
            /// It is intended to be portable at least between Unix-family platforms and
            /// Windows.
            ///
            /// A wall clock is a clock which measures the date and time according to
            /// some external reference.
            ///
            /// External references may be reset, so this clock is not necessarily
            /// monotonic, making it unsuitable for measuring elapsed time.
            ///
            /// It is intended for reporting the current date and time for humans.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod wall_clock {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// A time and date in seconds plus nanoseconds.
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Datetime {
                    pub seconds: u64,
                    pub nanoseconds: u32,
                }
                impl ::core::fmt::Debug for Datetime {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Datetime")
                            .field("seconds", &self.seconds)
                            .field("nanoseconds", &self.nanoseconds)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_now_cabi<T: Guest>(arg0: *mut u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { T::now() };
                        let Datetime { seconds: seconds1, nanoseconds: nanoseconds1 } = result0;
                        *arg0.add(0).cast::<i64>() = _rt::as_i64(seconds1);
                        *arg0.add(8).cast::<i32>() = _rt::as_i32(nanoseconds1);
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case, unused_unsafe)]
                pub unsafe fn _export_resolution_cabi<T: Guest>(arg0: *mut u8) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                        let result0 = { T::resolution() };
                        let Datetime { seconds: seconds1, nanoseconds: nanoseconds1 } = result0;
                        *arg0.add(0).cast::<i64>() = _rt::as_i64(seconds1);
                        *arg0.add(8).cast::<i32>() = _rt::as_i32(nanoseconds1);
                    }
                }
                pub trait Guest {
                    /// Read the current value of the clock.
                    ///
                    /// This clock is not monotonic, therefore calling this function repeatedly
                    /// will not necessarily produce a sequence of non-decreasing values.
                    ///
                    /// The returned timestamps represent the number of seconds since
                    /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
                    /// also known as [Unix Time].
                    ///
                    /// The nanoseconds field of the output is always less than 1000000000.
                    ///
                    /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
                    /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
                    #[allow(async_fn_in_trait)]
                    fn now() -> Datetime;
                    /// Query the resolution of the clock.
                    ///
                    /// The nanoseconds field of the output is always less than 1000000000.
                    #[allow(async_fn_in_trait)]
                    fn resolution() -> Datetime;
                }
                #[doc(hidden)]
                macro_rules! __export_wasi_clocks_wall_clock_0_3_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[cfg_attr(target_arch = "wasm32", export_name =
                        "now")] #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        wasiX3AclocksX2Fwall_clockX400X2E3X2E0X00now(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: _export_now_cabi::<$ty > (arg0) } }
                        #[cfg_attr(target_arch = "wasm32", export_name = "resolution")]
                        #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
                        #[allow(non_snake_case)] unsafe extern "C" fn
                        wasiX3AclocksX2Fwall_clockX400X2E3X2E0X00resolution(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        _export_resolution_cabi::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_wasi_clocks_wall_clock_0_3_0_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_exports_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::wasi::clocks::monotonic_clock::__export_wasi_clocks_monotonic_clock_0_3_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasi::clocks::monotonic_clock);
        $($path_to_types_root)*::
        exports::wasi::clocks::wall_clock::__export_wasi_clocks_wall_clock_0_3_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::wasi::clocks::wall_clock);
    };
}
#[doc(inline)]
pub(crate) use __export_exports_impl as export;
#[rustfmt::skip]
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.44.0:wasi:clocks@0.3.0:exports:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 438] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb8\x02\x01A\x02\x01\
A\x04\x01B\x0c\x01w\x04\0\x07instant\x03\0\0\x01w\x04\0\x08duration\x03\0\x02\x01\
@\0\0\x01\x04\0\x03now\x01\x04\x01@\0\0\x03\x04\0\x0aresolution\x01\x05\x01@\x01\
\x04when\x01\x01\0\x04\0\x11[async]wait-until\x01\x06\x01@\x01\x08how-long\x03\x01\
\0\x04\0\x0f[async]wait-for\x01\x07\x04\0!wasi:clocks/monotonic-clock@0.3.0\x05\0\
\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\
\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x04\0\x1cwasi:clocks/wall-\
clock@0.3.0\x05\x01\x04\0\x19wasi:clocks/exports@0.3.0\x04\0\x0b\x0d\x01\0\x07ex\
ports\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.238.\
0\x10wit-bindgen-rust\x060.44.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
